
import sqlite3
import datetime

import aiogram
from aiogram import executor, types, Bot, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from magic_filter.operations import call
from datetime import timedelta


from handlers import keyboard

# __________________________–î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞__________________________
admin_id = 2018079386 # Id –∞–¥–º–∏–Ω–∞
token = "6513775298:AAHFE_DqDW3rgWdR_hhaTkYetRNCvZXcGIE"  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
chat_link = "https://t.me/+BI-3nBV-yn8xODk6"  # –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
# __________________________–í–æ–ø—Ä–æ—Å—ã__________________________
question_1 = "–í—ã –ø—Ä–∏—à–ª–∏ —Å —Ä–µ–∫–ª–∞–º—ã (—Å –∫–∞–∫–æ–π?) –∏–ª–∏ –∂–µ –æ—Ç –¥—Ä—É–≥–∞ (—Å—Å—ã–ª–∫–∞) "
question_2 = "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ?"
question_3 = "–ë—ã–ª –ª–∏ –æ–ø—ã—Ç –≤ —Å–∫–∞–º–µ? –ï—Å–ª–∏ –¥–∞, —Ç–æ –∫–∞–∫–æ–π?"
# __________________________–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —É –∞–¥–º–∏–Ω–∞__________________________
admin_question_1 = "–û—Ç –∫—É–¥–∞ –ø—Ä–∏—à–µ–ª —á–µ–ª"
admin_question_2 = "–í—Ä–µ–º—è –Ω–∞ –≤–æ—Ä–∫"
admin_question_3 = "–û–ø—ã—Ç –≤ —Å–∫–∞–º–µ"
# _________________________________________________________


# __________________________–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞__________________________
async def on_startup(_):
    print("Bot Started")
# _________________________________________________________


# __________________________–î–µ–π—Å—Ç–≤–∏–µ —Å –ë–î__________________________
class Database:
    def __init__(self, db_file):
        self.connection = sqlite3.connect(db_file)
        self.cursor = self.connection.cursor()


        print("–í—Å—ë –∫–∞–π—Ñ")

    def add_user(self, ID, username):
        with self.connection:
            try:
                self.cursor.execute("INSERT INTO 'user' VALUES (?, ?, ?, ?, ?)", (ID, "null", "null", "null", username))
            except: pass

    def add_client(self, ID):
        with self.connection:
            try:
                self.cursor.execute("INSERT INTO 'client' VALUES (?)", (ID,))
            except: pass

    def update_user_data(self, ID, a1, a2, a3):
        with self.connection:
            self.cursor.execute("UPDATE 'user' SET answer1 = ?, answer2 = ?, answer3 = ? WHERE user_id = ?", (a1, a2, a3, ID))

    def get_user_data(self, ID):
        with self.connection:
            return self.cursor.execute("SELECT * FROM 'user' WHERE user_id = ?", (ID,)).fetchmany()[0]

    def delete_zayavka(self, ID):
        with self.connection:
            return self.cursor.execute("DELETE FROM 'user' WHERE user_id = ?", (ID,))

    def client_exists(self, ID):
        with self.connection:
            result = self.cursor.execute("SELECT * FROM 'user' WHERE user_id = ?", (ID,)).fetchmany(1)
            if not bool(len(result)):
                return False
            else: return True

    def confirmed_user(self, ID):
        with self.connection:
            result = self.cursor.execute("SELECT * FROM 'client' WHERE user_id = ?", (ID,)).fetchmany(1)
            if not bool(len(result)):
                return False
            else: return True
# _________________________________________________________

# __________________________–ö–Ω–æ–ø–∫–∏__________________________
cb = CallbackData("fabnum", "action")

main_menu = InlineKeyboardMarkup(row_width=1)
main_menu.add(InlineKeyboardButton(text='–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É', callback_data=cb.new(action='start_answer')))

send_menu = InlineKeyboardMarkup(row_width=2)
send_menu.add(InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—åüí¨", callback_data=cb.new(action="send")),
              InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=cb.new(action='application')))


def admin_menu(ID):
    menu = InlineKeyboardMarkup(row_width=2)
    menu.add(InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å‚úÖ", callback_data=f"#y{str(ID)}"),
             InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å‚ùå", callback_data=f'#n{str(ID)}'))
    return menu
# _________________________________________________________

# __________________________–ü–æ–¥–∫–ª—é—á–∞–µ–º –ë–î__________________________
db = Database("../../bot/data.db")
# _________________________________________________________


class get_answer(StatesGroup):
    answer1 = State()
    answer2 = State()
    answer3 = State()


# ____________________________________________________
# @dp.message_handlers(commands=["start"])
async def command_start(message: types.Message):  # –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ /start
    if message.from_user.username is not None:
        if db.confirmed_user(message.from_user.id):
            await bot.send_message(message.from_user.id, "‚ùáÔ∏è –í—ã —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã üëç", reply_markup=keyboard.mainmenu)

            await call.answer(message.answer)
        else:
            if db.client_exists(message.from_user.id):
                await bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É ‚ùå")
            else:
                await bot.send_message(message.from_user.id,
                                       "‚≠êÔ∏è–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å‚≠êÔ∏è\n \nüî•–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç PALADINS TEAMüî• \n \n‚úÖ–ü–æ–¥–∞–≤–∞–π –∑–∞—è–≤–∫—É‚úÖ",  # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                       reply_markup=main_menu)
    else:
        await bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω <b>username</b>(–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start", parse_mode=types.ParseMode.HTML)

# @dp.callback_query_handlers(cb.filter(action=["send", "application"]), state="*")
async def send_state(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    action = callback_data["action"]
    current_state = await state.get_state()
    if current_state is None:
        return
    if action == "send":
        await bot.send_message(admin_id, f"–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{str(db.get_user_data(call.from_user.id)[4])}\n"
                                         f"{admin_question_1}: <b>{str(db.get_user_data(call.from_user.id)[1])}</b>\n"
                                         f"{admin_question_2}: <b>{str(db.get_user_data(call.from_user.id)[2])}</b>\n"
                                         f"{admin_question_3}: <b>{str(db.get_user_data(call.from_user.id)[3])}</b>", parse_mode=types.ParseMode.HTML, reply_markup=admin_menu(call.from_user.id))
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text="–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ")
        await state.finish()
    if action == "application":
        db.delete_zayavka(call.from_user.id)
        await state.finish()
        await command_start(call)
    await call.answer()


# @dp.callback_query_handler(text_contains="#")
async def access(call: types.CallbackQuery):  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏
    temp = [call.data[1:2], call.data[2:]]
    if temp[0] == "y":
        db.add_client(temp[1])
        db.delete_zayavka(temp[1])
        await bot.edit_message_text(chat_id=admin_id, message_id=call.message.message_id, text="–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É‚úÖ")
        await bot.send_message(temp[1], f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø—Ä–∏–Ω—è—Ç—ã –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É, —É–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã‚ö°Ô∏è ‚úÖ\n \n'
                                        f'üîñ –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç: {chat_link} \n \n'
                                        f'‚ùóÔ∏è <b>–•–û–†–û–®–ò–• –ú–ê–ú–û–ù–¢–û–í ‚ùóÔ∏è</b>', reply_markup=keyboard.mainmenu,
                               disable_web_page_preview=True, parse_mode=types.ParseMode.HTML)


    elif temp[0] == "n":
        await bot.edit_message_text(chat_id=admin_id, message_id=call.message.message_id, text="–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É‚ùå")
        await bot.send_message(temp[1], '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ ‚ùå')

    await call.answer()

async def keyboard_handler(message: types.message):
    try:
        match message.text:
            case "–í—ã–ø–ª–∞—Ç—ãüí∏":
                await message.reply('–í—ã–ø–ª–∞—Ç—ã: https://t.me/win1telegaaa')
            case "–ß–∞—Çüí¨":
                await message.reply('–ß–∞—Ç–∏–∫: https://t.me/+BI-3nBV-yn8xODk6')
            case "‚ö°Ô∏è–ó–ê–†–Ø–î‚ö°Ô∏è":
                await message.reply('‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è–ó–ê–†–Ø–î –ù–ê –ï–ë–ù–£–¢–´–ô –°–ö–ê–ú‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏èÔ∏è')
            case "üìö–ú–∞–Ω—É–∞–ª—ã":
                await message.reply('üí∏–ú–∞–Ω—É–∞–ª—ã: https://t.me/+ChWPHcqwK_AxMzQy')
            case "üíº–û –ø—Ä–æ–µ–∫—Ç–µ":
                await  message.reply("""‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:
üìÜ –ú—ã –æ—Ç–∫—Ä—ã–ª–∏—Å—å: 14.08.2023

‚îè üí∞ –í—ã–ø–ª–∞—Ç—ã:
‚î£–ü—Ä—è–º–∏–∫–∏:80%
‚î£–ö–ª–∞—É–¥:60%
‚îó–®–∞–Ω—Ç–∞–∂ –¥–ø:60%""")
            case _:
                pass

    except Exception as e:
        print(e)

async def command_team(message: types.Message):  # –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ /team
                await bot.send_message(message.chat.id,
                                       """<u><b>–ü–ï–†–°–û–ù–ê–õ –ì–†–£–ü–ü–´</b></u>
üëë <b>–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å</b>
 ‚îî <a href="https://t.me/kristiii772">@kristiii772</a> ¬ª –¢–°

‚öúÔ∏è <b>–°–æ—É—á—Ä–µ–¥–∏—Ç–µ–ª—å</b>
 ‚îî <a href="https://t.me/n1tex">@n1tex</a> ¬ª –ö–æ–¥–µ—Ä

üëÆüèº <b>–ê–¥–º–∏–Ω</b>
 ‚îú <a href="https://t.me/efremoon">@efremoon</a> ¬ª —Ç–ø –ª–æ–∫–µ—Ä
 ‚îî <a href="https://t.me/rasipuha">@rasipuha</a> ¬ª –ì–∞—Ä–∞–Ω—Ç""", parse_mode=types.ParseMode.HTML)

async def command_card(message: types.Message):  # –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ /card
                await bot.send_message(message.chat.id,
                                       """<b>üá∫üá¶–£–∫—Ä  (–ú–æ–Ω–æ –±–∞–Ω–∫):</b> 
<code>5375414118127207</code>
–ö—Å–µ–Ω—ñ—è –Ñ–ø–∞–Ω–æ–≤–∞
(–æ—Ç 600 –≥—Ä–Ω)
<b>üá∑üá∫–†–§ (–ü—Ä–æ–º—Å–≤—è–∑—å–±–∞–Ω–∫):</b> 
<code>5203738029970372</code>
–ß—É—Ä–∫—É–ª–æ–≤ –ö–∏—Ä–∏–ª–ª –í.
(–æ—Ç 1.500 —Ä—É–±)
<b>üá∞üáø–ö–ó (kaspiGold):</b> 
<code>4400430201189336</code>
–ò–≤–∞–Ω –ó.
(–æ—Ç 10.000 —Ç–µ–Ω—å–≥–µ)""", parse_mode=types.ParseMode.HTML)


async def command_mute(message):
    global comment
    name1 = message.from_user.get_mention(as_html=True)
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return
    try:
        muteint = int(message.text.split()[1])
        mutetype = message.text.split()[2]
        comment = " ".join(message.text.split()[3:])
    except aiogram.utils.exceptions.ChatAdminRequired:
        await message.reply(f'''–ù–µ–ª—å–∑—è –¥–∞—Ç—å –º—É—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.''')
    except aiogram.utils.exceptions.CantRestrictChatOwner:
        await message.reply(f'''–ù–µ–ª—å–∑—è –¥–∞—Ç—å –º—É—Ç –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é.''')

    except IndexError:
        await message.reply('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!\n–ü—Ä–∏–º–µ—Ä:\n`/–º—É—Ç 1 —á –ø—Ä–∏—á–∏–Ω–∞`')
        return
    if mutetype == "—á" or mutetype == "—á–∞—Å–æ–≤" or mutetype == "—á–∞—Å":
        dt = datetime.datetime.now() + timedelta(hours=muteint)
        timestamp = dt.timestamp()
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id,
                                       types.ChatPermissions(False), until_date=timestamp)
        await message.reply(
            f' | <b>–†–µ—à–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ:</b> {name1}\n | <b>–ù–∞—Ä—É—à–∏—Ç–µ–ª—å:</b> <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\n‚è∞ | <b>–°—Ä–æ–∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—è:</b> {muteint} {mutetype}\n | <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {comment}',
            parse_mode='html')
    elif mutetype == "–º" or mutetype == "–º–∏–Ω—É—Ç" or mutetype == "–º–∏–Ω—É—Ç—ã":
        dt = datetime.datetime.now() + timedelta(minutes=muteint)
        timestamp = dt.timestamp()
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id,
                                       types.ChatPermissions(False), until_date=timestamp)
        await message.reply(
            f' | <b>–†–µ—à–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ:</b> {name1}\n | <b>–ù–∞—Ä—É—à–∏—Ç–µ–ª—å:</b> <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\n‚è∞ | <b>–°—Ä–æ–∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—è:</b> {muteint} {mutetype}\n | <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {comment}',
            parse_mode='html')
    elif mutetype == "–¥" or mutetype == "–¥–Ω–µ–π" or mutetype == "–¥–µ–Ω—å":
        dt = datetime.datetime.now() + datetime.timedelta(days=muteint)
        timestamp = dt.timestamp()
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id,
                                       types.ChatPermissions(False), until_date=timestamp)
        await message.reply(
            f' | <b>–†–µ—à–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ:</b> {name1}\n | <b>–ù–∞—Ä—É—à–∏—Ç–µ–ª—å:</b> <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\n‚è∞ | <b>–°—Ä–æ–∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—è:</b> {muteint} {mutetype}\n | <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {comment}',
            parse_mode='html')

async def command_unmute(message: types.Message):
    try:
        if not message.reply_to_message:
            await message.reply(f'''–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!''')
            return
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, can_send_messages=True, can_send_media_messages=True, can_send_other_messages=True, can_add_web_page_previews=True)
        await bot.send_message(message.chat.id, f'''‚úÖ <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> –±–æ–ª—å—à–µ –Ω–µ –≤ –º—É—Ç–µ.''', parse_mode='html')



async def start_state(call: types.CallbackQuery, callback_data: dict):  # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    action = callback_data["action"]
    if action == "start_answer":
        db.add_user(call.from_user.id, call.from_user.username)
        await bot.send_message(call.from_user.id, f"–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤:\n1) <b>{question_1}</b>", parse_mode=types.ParseMode.HTML)
        await get_answer.answer1.set()


# @dp.message_handlers(state=get_answer.answer1)
async def answer1(message: types.Message, state: FSMContext):  # –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    async with state.proxy() as data:
        data["answer1"] = message.text
    await bot.send_message(message.from_user.id, f'2) <b>{question_2}</b>', parse_mode=types.ParseMode.HTML)
    await get_answer.next()


# @dp.message_handlers(state=get_answer.answer2)
async def answer2(message: types.Message, state: FSMContext):  # –¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
    async with state.proxy() as data:
        data["answer2"] = message.text
    await bot.send_message(message.from_user.id, f'3) <b>{question_3}</b>', parse_mode=types.ParseMode.HTML)
    await get_answer.next()


# @dp.message_handlers(state=get_answer.answer3)
async def answer3(message: types.Message, state: FSMContext):  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    async with state.proxy() as data:
        data["answer3"] = message.text
    await bot.send_message(message.from_user.id, f'–û—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã:\n\n'
                                                 f'1) <b>{data["answer1"]}</b>\n'
                                                 f'2) <b>{data["answer2"]}</b>\n'
                                                 f'3) <b>{data["answer3"]}</b>', parse_mode=types.ParseMode.HTML, reply_markup=send_menu)
    db.update_user_data(message.from_user.id, data["answer1"], data["answer2"], data["answer3"])
# _________________________________________________________


# __________________________–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π__________________________
def register_handlers_client(dp: Dispatcher):
    dp.register_callback_query_handler(send_state, cb.filter(action=["send", "application"]), state="*")
    dp.message_handler(commands=['–º—É—Ç', 'mute'], commands_prefix='./', is_chat_admin=True)
    dp.message_handler(commands=['—Ä–∞–∑–º—É—Ç', 'unmute'], commands_prefix='/!.', is_chat_admin=True)
    dp.register_message_handler(command_start, commands=["start"])
    dp.register_message_handler(command_team, commands=["team"])
    dp.register_message_handler(command_card, commands=["card"])
    dp.register_message_handler(command_mute, commands=['–º—É—Ç', 'mute'])
    dp.register_message_handler(command_unmute, commands=['–∞–Ω–º—É—Ç', 'unmute'])
    dp.register_callback_query_handler(access, text_contains="#")
    dp.register_callback_query_handler(start_state, cb.filter(action=["start_answer"]))
    dp.register_message_handler(answer1, state=get_answer.answer1)
    dp.register_message_handler(answer2, state=get_answer.answer2)
    dp.register_message_handler(answer3, state=get_answer.answer3)
    dp.register_message_handler(keyboard_handler, state='*')
# _________________________________________________________


register_handlers_client(dp)  # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π


if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)

